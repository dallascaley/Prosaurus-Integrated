Here are my thoughts

1) any message that goes from front end to backend needs to be encrypted, especially authentication related messages

2) In order to do this. first figure out how to get HTTPS working.

Paraphrased from Chat GPT

A) Generate a self-signed SSL certificat

openssl genpkey -algorithm RSA -out key.pem

openssl req -new -key key.pem -out csr.pem

You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:CA
Locality Name (eg, city) []:Long Beach
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Cherry Blossom Development
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:Dallas Caley
Email Address []:dallascaley@gmail.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:W--c---1
An optional company name []:Prosaurus

openssl x509 -req -in csr.pem -signkey key.pem -out cert.pem

B) Configure Vue CLI to use HTTPS

In vue.config.js make it look like this:

module.exports = {
  devServer: {
    https: {
      key: fs.readFileSync('./path/to/key.pem'),
      cert: fs.readFileSync('./path/to/cert.pem'),
    },
    port: 8080, // You can change this port if needed
  },
};

Note... this didn't work




C) For Production (Deploying on a Web Server)

(the rest of this is copied verbatim because i'm lazy)

For production, enabling HTTPS depends on the hosting platform or web server you are using (e.g., Nginx, Apache, or a cloud service).

Using Nginx or Apache:

Obtain an SSL Certificate:

You can get a free SSL certificate from Let's Encrypt, or you can purchase one from a certificate authority (CA) like Comodo, DigiCert, etc.

If you're using Let's Encrypt, you can use the Certbot tool to obtain and configure your certificate automatically.
Configure Nginx: After you have the SSL certificate, configure Nginx to serve your Vue.js application over HTTPS. Here's a basic example:

server {
    listen 80;
    server_name example.com www.example.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name example.com www.example.com;

    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    location / {
        root /path/to/your/vue/build;
        try_files $uri $uri/ /index.html;
    }
}

Make sure to replace example.com with your actual domain and adjust the paths for your SSL certificate and key.
After updating Nginx configuration, reload or restart the server:

  sudo nginx -s reload

Configure Apache: If you're using Apache, the configuration might look like this:

<VirtualHost *:80>
    ServerName example.com
    Redirect permanent / https://example.com/
</VirtualHost>

<VirtualHost *:443>
    ServerName example.com
    SSLEngine on
    SSLCertificateFile /path/to/your/certificate.crt
    SSLCertificateKeyFile /path/to/your/private.key
    SSLCertificateChainFile /path/to/your/chainfile.pem

    DocumentRoot /path/to/your/vue/build
    <Directory /path/to/your/vue/build>
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>
</VirtualHost>

Once you've made changes, restart Apache:

  sudo systemctl restart apache2

3. Cloud Hosting (e.g., Netlify, Vercel, etc.)

Netlify and Vercel automatically provide HTTPS for your site when you deploy it. All you need to do is link your domain to the platform, and it will configure HTTPS for you.

Conclusion

For local development, you can easily enable HTTPS using Vue CLI's vue.config.js file and a self-signed certificate. For production, you'll need to use a proper SSL certificate and configure a web server (like Nginx or Apache) to serve your app securely over HTTPS. If you're using a cloud service, most of them provide HTTPS automatically.

Let me know if you need more help with any of the steps!

Update: 2/21/2025

The encryption keys have all been set and SSL is working.  now on to make the authentication actually work.

Idea.

1) When the user enters their new password, they must enter it twice.  The first validation simply checks if the passwords are the same

2) Once it is verified that the passwords match.  The front end then 

    a) generate a unique salt key

    b) use an sha256 hash algorithm on the password concatenated with the salt key separated by a period to create a new hash.

    c) This hash would be passed down to the back end along with the salt key.   The salt key would be stored in the database along with the password hash.

4) Subsequent login attempts would do something similar in that it would hash whatever password was being submitted by the user and send only the hashed result to the backend
